<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.lt.permission.dao.RoleDao">
	<resultMap id="BaseResultMap" type="com.lt.permission.model.Role">
		<id column="rid" jdbcType="VARCHAR" property="rid" />
		<result column="rname" jdbcType="VARCHAR" property="rname" />
		<result column="rcode" jdbcType="VARCHAR" property="rcode" />
		<result column="remark" jdbcType="VARCHAR" property="remark" />
		<result column="created_time" jdbcType="TIMESTAMP" property="createdTime" />
		<result column="creator" jdbcType="VARCHAR" property="creator" />
		<result column="modified_time" jdbcType="TIMESTAMP" property="modifiedTime" />
		<result column="modifier" jdbcType="VARCHAR" property="modifier" />
		<result column="is_delete" jdbcType="INTEGER" property="isDelete" />
		<result column="version" jdbcType="INTEGER" property="version" />
	</resultMap>
	<sql id="Base_Column_List">
		rid, rname, rcode, remark, created_time, creator,
		modified_time, modifier,
		is_delete,
		version
	</sql>
	<select id="selectByPrimaryKey" parameterType="java.lang.String"
		resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from t_role
		where rid = #{rid,jdbcType=VARCHAR}
	</select>
	<delete id="deleteByPrimaryKey" parameterType="java.lang.String">
		delete from t_role
		where rid = #{rid,jdbcType=VARCHAR}
	</delete>
	<insert id="insert" parameterType="com.lt.permission.model.Role">
		insert into t_role (rid,
		rname, rcode,
		remark, created_time, creator,
		modified_time, modifier,
		is_delete,
		version)
		values (#{rid,jdbcType=VARCHAR},
		#{rname,jdbcType=VARCHAR},
		#{rcode,jdbcType=VARCHAR},
		#{remark,jdbcType=VARCHAR}, now(), #{creator,jdbcType=VARCHAR},
		now(),
		#{modifier,jdbcType=VARCHAR},0,
		1)
	</insert>
	<insert id="insertSelective" parameterType="com.lt.permission.model.Role">
		insert into t_role
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="rid != null">
				rid,
			</if>
			<if test="rname != null">
				rname,
			</if>
			<if test="rcode != null">
				rcode,
			</if>
			<if test="remark != null">
				remark,
			</if>
			<if test="createdTime != null">
				created_time,
			</if>
			<if test="creator != null">
				creator,
			</if>
			<if test="modifiedTime != null">
				modified_time,
			</if>
			<if test="modifier != null">
				modifier,
			</if>
			<if test="isDelete != null">
				is_delete,
			</if>
			<if test="version != null">
				version,
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="rid != null">
				#{rid,jdbcType=VARCHAR},
			</if>
			<if test="rname != null">
				#{rname,jdbcType=VARCHAR},
			</if>
			<if test="rcode != null">
				#{rcode,jdbcType=VARCHAR},
			</if>
			<if test="remark != null">
				#{remark,jdbcType=VARCHAR},
			</if>
			<if test="createdTime != null">
				#{createdTime,jdbcType=TIMESTAMP},
			</if>
			<if test="creator != null">
				#{creator,jdbcType=VARCHAR},
			</if>
			<if test="modifiedTime != null">
				#{modifiedTime,jdbcType=TIMESTAMP},
			</if>
			<if test="modifier != null">
				#{modifier,jdbcType=VARCHAR},
			</if>
			<if test="isDelete != null">
				#{isDelete,jdbcType=INTEGER},
			</if>
			<if test="version != null">
				#{version,jdbcType=INTEGER},
			</if>
		</trim>
	</insert>
	<update id="updateByPrimaryKeySelective" parameterType="com.lt.permission.model.Role">
		update t_role
		<set>
			<if test="rname != null">
				rname = #{rname,jdbcType=VARCHAR},
			</if>
			<if test="rcode != null">
				rcode = #{rcode,jdbcType=VARCHAR},
			</if>
			<if test="remark != null">
				remark = #{remark,jdbcType=VARCHAR},
			</if>
			<if test="createdTime != null">
				created_time = #{createdTime,jdbcType=TIMESTAMP},
			</if>
			<if test="creator != null">
				creator = #{creator,jdbcType=VARCHAR},
			</if>
			<if test="modifiedTime != null">
				modified_time = #{modifiedTime,jdbcType=TIMESTAMP},
			</if>
			<if test="modifier != null">
				modifier = #{modifier,jdbcType=VARCHAR},
			</if>
			<if test="isDelete != null">
				is_delete = #{isDelete,jdbcType=INTEGER},
			</if>
			<if test="version != null">
				version = #{version,jdbcType=INTEGER},
			</if>
		</set>
		where rid = #{rid,jdbcType=VARCHAR}
	</update>
	<update id="updateByPrimaryKey" parameterType="com.lt.permission.model.Role">
		update t_role
		set
		rname = #{rname,jdbcType=VARCHAR},
		rcode = #{rcode,jdbcType=VARCHAR},
		remark = #{remark,jdbcType=VARCHAR},
		created_time =
		#{createdTime,jdbcType=TIMESTAMP},
		creator =
		#{creator,jdbcType=VARCHAR},
		modified_time =
		#{modifiedTime,jdbcType=TIMESTAMP},
		modifier =
		#{modifier,jdbcType=VARCHAR},
		is_delete = #{isDelete,jdbcType=INTEGER},
		version = #{version,jdbcType=INTEGER}
		where rid =
		#{rid,jdbcType=VARCHAR}
	</update>

	<sql id="findCondition">
		<if test="rname != null">
			and rname like #{rname}
		</if>
		<if test="rcode != null">
			and rcode like #{rcode}
		</if>
	</sql>

	<select id="findRolesByPage" parameterType="java.util.Map"
		resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from t_role
		where is_delete=0
		<include refid="findCondition" />
		order by created_time desc
		limit
		#{page},#{pageSize}
	</select>

	<select id="findRolesCount" parameterType="map" resultType="Integer">
		select
		count(1)
		from
		t_role
		where is_delete=0
		<include refid="findCondition"></include>
	</select>

	<update id="logicDeleteRole">
		update t_role
		set
		is_delete = 1,
		modified_time=now()
		where rid =
		#{rid,jdbcType=VARCHAR}
	</update>
	
	<select id="getRoleByUid" resultMap="BaseResultMap">
		select r.rid, r.rname, r.rcode, r.remark
		from t_role r left join t_user_role ur
		on r.rid=ur.rid
		where ur.uid=#{uid,jdbcType=VARCHAR} 
		and r.is_delete=0 and ur.is_delete=0 
		order by r.created_time
	</select>
	<select id="getNonRoleByUid" resultMap="BaseResultMap">
		select r.rid, r.rname, r.rcode, r.remark
		from t_role r left join t_user_role ur
		on r.rid=ur.rid and ur.uid=#{uid,jdbcType=VARCHAR} and ur.is_delete=0 
		where ur.rid is null
		and r.is_delete=0 
		order by r.created_time
	</select>
	<select id="getRolesByUsername" resultMap="BaseResultMap">
		select distinct r.rcode
		from t_role r 
		left join t_user_role ur
			on r.rid=ur.rid
		left join t_user u
			on ur.uid=u.uid 
		where u.username=#{username,jdbcType=VARCHAR} 
		and r.is_delete=0 and ur.is_delete=0 and u.is_delete=0
		order by r.created_time
	</select>
	<select id="getRolesByFid" resultMap="BaseResultMap">
		select distinct r.rcode
		from t_role r 
		left join t_role_function rf
			on r.rid=rf.rid
		where rf.fid=#{fid,jdbcType=VARCHAR} 
		and r.is_delete=0 and rf.is_delete=0
		order by r.created_time
	</select>
</mapper>